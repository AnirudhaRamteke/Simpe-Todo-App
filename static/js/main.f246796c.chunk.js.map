{"version":3,"sources":["images/vector1.svg","images/vector2.svg","images/ellipse1.svg","images/ellipse2.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","state","newItem","list","key","value","this","setState","id","Math","random","slice","push","updatedList","filter","item","className","src","vector1","alt","vector2","ellipse1","ellipse2","type","placeholder","onChange","e","updateInput","target","onClick","addItem","map","deleteItem","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NAAe,G,MAAA,IAA0B,qCCA1B,MAA0B,oCCA1B,MAA0B,qCCA1B,MAA0B,qCC0G1BA,E,kDAlGb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAEDC,MAAM,CACTC,QAAQ,GACRC,KAAK,IALS,E,wDASNC,EAAIC,GAEdC,KAAKC,SAAL,eACGH,EAAMC,M,gCAMT,IAAMH,EAAQ,CACZM,GAAI,EAAEC,KAAKC,SACXL,MAAOC,KAAKL,MAAMC,QAAQS,SAItBR,EAAI,YAAMG,KAAKL,MAAME,MAG3BA,EAAKS,KAAKV,GAGVI,KAAKC,SAAS,CACZJ,OACAD,QAAQ,O,iCAMDM,GAET,IAEMK,EAFI,YAAOP,KAAKL,MAAME,MAEHW,QAAO,SAAAC,GAAI,OAAIA,EAAKP,KAAOA,KAEpDF,KAAKC,SAAS,CAAEJ,KAAMU,M,+BAKf,IAAD,OACN,OACE,sBAAKG,UAAU,MAAf,UAEA,oBAAIA,UAAU,QAAd,uBAEA,qBAAKA,UAAU,UAAUC,IAAMC,EAASC,IAAI,YAE5C,qBAAKH,UAAU,UAAUC,IAAMG,EAASD,IAAI,YAE5C,qBAAKH,UAAU,WAAWC,IAAMI,EAAUF,IAAI,aAE9C,qBAAKH,UAAU,WAAWC,IAAMK,EAAUH,IAAI,aAE7C,qBAAKH,UAAU,WAAf,SACA,2CAIA,uBACA,uBAAOA,UAAU,QACjBO,KAAK,OACLC,YAAY,mBACZnB,MAAOC,KAAKL,MAAMC,QAClBuB,SAAU,SAAAC,GAAC,OAAK,EAAKC,YAAY,UAAWD,EAAEE,OAAOvB,UAGrD,wBAAQW,UAAU,MAAMa,QAAW,kBAAM,EAAKC,WAA9C,iBAGA,oBAAId,UAAU,UAAd,SACCV,KAAKL,MAAME,KAAK4B,KAAI,SAAAhB,GACnB,OACE,qBAAIC,UAAU,WAAd,UACGD,EAAKV,MACN,wBAAQW,UAAU,SAASa,QAAS,kBAAM,EAAKG,WAAWjB,EAAKP,KAA/D,sBAF4BO,EAAKP,gB,GAnF5ByB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f246796c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/vector1.c44ca8d4.svg\";","export default __webpack_public_path__ + \"static/media/vector2.33c8413d.svg\";","export default __webpack_public_path__ + \"static/media/ellipse1.7acf1533.svg\";","export default __webpack_public_path__ + \"static/media/ellipse2.a30ba0dd.svg\";","import React, { Component } from 'react';\nimport './app.css';\nimport vector1 from './images/vector1.svg';\nimport vector2 from './images/vector2.svg';\nimport ellipse1 from './images/ellipse1.svg';\nimport ellipse2 from './images/ellipse2.svg';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n\n    this.state={\n      newItem:\"\",\n      list:[]\n    }\n  }\n\n  updateInput(key,value){\n    //update react state\n    this.setState({\n      [key]: value\n    });\n  }\n\n  addItem(){\n    //create item with uinique id\n    const newItem={\n      id: 1+Math.random(),\n      value: this.state.newItem.slice()\n    };\n\n    //copy of current list of items \n    const list =[...this.state.list];\n\n    //add new item to list\n    list.push(newItem);\n\n    //update state\n    this.setState({\n      list,\n      newItem:\"\"\n\n    }); \n\n  }\n\n  deleteItem(id){\n    // copy current list of items\n    const list = [...this.state.list];\n    // filter out the item being deleted\n    const updatedList = list.filter(item => item.id !== id);\n\n    this.setState({ list: updatedList });\n\n  }\n\n\n  render(){\n    return (\n      <div className=\"App\">\n      \n      <h1 className=\"title\">YOUR TODO\n      </h1>\n      <img className=\"vector1\" src= {vector1} alt=\"vector1\">\n      </img>\n      <img className=\"vector2\" src= {vector2} alt=\"vector2\">\n      </img>\n      <img className=\"ellipse1\" src= {ellipse1} alt=\"ellipse1\">\n      </img>\n      <img className=\"ellipse2\" src= {ellipse2} alt=\"ellipse2\">\n      </img>\n       <div className=\"subtitle\">\n       <p>\n       ADD ITEM\n       </p>\n       </div>\n       <br/>\n       <input className=\"input\"\n       type=\"text\"\n       placeholder=\"Type Item here..\"\n       value={this.state.newItem}\n       onChange={e =>  this.updateInput(\"newItem\", e.target.value)}\n       \n       />\n       <button className=\"add\" onClick = {() => this.addItem()}>\n       Add\n       </button>\n       <ul className=\"listbox\"  >\n       {this.state.list.map(item => {\n         return (\n           <li className=\"listitem\" key={item.id}>\n             {item.value}\n             <button className=\"remove\" onClick={() => this.deleteItem(item.id)}>\n             Remove\n             </button>\n           </li>\n         );\n       })}\n     </ul>\n       \n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}